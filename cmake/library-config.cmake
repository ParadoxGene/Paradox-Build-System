if(PARADOX_COMPILER STREQUAL "msvc")
    
elseif(PARADOX_COMPILER STREQUAL "gcc")
    set(GCC ON)
elseif(PARADOX_COMPILER STREQUAL "clang")
    set(Clang ON)
elseif(PARADOX_COMPILER STREQUAL "xcode")
    set(XCode ON)
endif()

if((${CMAKE_BUILD_TYPE} STREQUAL "Release") OR (${CMAKE_BUILD_TYPE} STREQUAL "release"))
    set(PARADOX_RELEASE ON)
elseif((${CMAKE_BUILD_TYPE} STREQUAL "Debug") OR (${CMAKE_BUILD_TYPE} STREQUAL "debug"))
    set(PARADOX_DEBUG ON)
    set(PARADOX_MSVC_DEBUG_FLAGS /W4 /WX)
    set(PARADOX_GCC_DEBUG_FLAGS -Og -pedantic -Wall -Wextra -Werror)
endif()

if(WIN32)
    if(MSVC)
        set(PARADOX_CXX_DEBUG_FLAGS ${PARADOX_MSVC_DEBUG_FLAGS})
    elseif(GCC)
        set(PARADOX_CXX_DEBUG_FLAGS ${PARADOX_GCC_DEBUG_FLAGS})
    endif()
elseif(LINUX)
    if(Clang)
        set(PARADOX_CXX_DEBUG_FLAGS ${PARADOX_CLANG_DEBUG_FLAGS})
    elseif(GCC)
        set(PARADOX_CXX_DEBUG_FLAGS ${PARADOX_GCC_DEBUG_FLAGS})
    endif()
elseif(APPLE)
    if(XCode)
        set(PARADOX_SWIFT_DEBUG_FLAGS ${PARADOX_XCODE_DEBUG_FLAGS})
    elseif(Clang)
        set(PARADOX_CXX_DEBUG_FLAGS ${PARADOX_CLANG_DEBUG_FLAGS})
    elseif(GCC)
        set(PARADOX_CXX_DEBUG_FLAGS ${PARADOX_GCC_DEBUG_FLAGS})
    endif()
endif()

if(PARADOX_RELEASE)
    set(PARADOX_CXX_COMPILE_FLAGS ${PARADOX_CXX_COMPILE_FLAGS} ${PARADOX_CXX_RELEASE_FLAGS})
elseif(PARADOX_DEBUG)
    set(PARADOX_CXX_COMPILE_FLAGS ${PARADOX_CXX_COMPILE_FLAGS} ${PARADOX_CXX_DEBUG_FLAGS})
endif()

include("tests/googletest.cmake")
include("tests/unity.cmake")

function(paradox_add_library libname libprefix)
    option(${libprefix}_BUILD_C_LIB "Build the static|shared ${libname} c library" ON)
    if(${libprefix}_BUILD_C_LIB)
        paradox_c_library(${libname} ${libprefix})
    endif()

    option(${libprefix}_BUILD_CXX_LIB "Build the static|shared ${libname} cpp library" ON)
    if(${libprefix}_BUILD_CXX_LIB)
        paradox_cxx_library(${libname} ${libprefix})
    endif()
endfunction()

function(paradox_c_library libname libprefix)
    get_property(${libprefix}_C_LIB_EXISTS GLOBAL PROPERTY ${libprefix}_C_LIB_EXISTS_PROPERTY)
    if(NOT ${libprefix}_C_LIB_EXISTS AND PARADOX_LANGUAGE STREQUAL "c")
        set_property(GLOBAL PROPERTY ${libprefix}_C_LIB_EXISTS_PROPERTY ON)
        file(GLOB_RECURSE ${libprefix}_C_SRC "${PROJECT_DIR}/api/c/${libname}/src/**.c")
        add_library(${libname} SHARED ${${libprefix}_C_SRC})
        set_target_properties(${libname} PROPERTIES
            LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/../../paradox-static/$<CONFIG>"
            ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/../../paradox-static/$<CONFIG>"
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/../../paradox-shared/$<CONFIG>")

        target_compile_options(${libname} PRIVATE ${PARADOX_CXX_COMPILE_FLAGS})
        target_compile_definitions(${libname} PRIVATE ${libprefix}_BUILD_DLL)
        target_include_directories(${libname} PUBLIC "${PROJECT_DIR}/api/c/${libname}/include/")
    endif()
endfunction()

function(paradox_cxx_library libname libprefix)
    get_property(${libprefix}_CXX_LIB_EXISTS GLOBAL PROPERTY ${libprefix}_CXX_LIB_EXISTS_PROPERTY)
    if(NOT ${libprefix}_CXX_LIB_EXISTS AND PARADOX_LANGUAGE STREQUAL "cpp")
        set_property(GLOBAL PROPERTY ${libprefix}_CXX_LIB_EXISTS_PROPERTY ON)
        file(GLOB_RECURSE ${libprefix}_CXX_SRC "${PROJECT_DIR}/api/cpp/${libname}/src/**.cpp")
        add_library(${libname} SHARED ${${libprefix}_CXX_SRC})
        set_target_properties(${libname} PROPERTIES
            LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/../../paradox-static/$<CONFIG>"
            ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/../../paradox-static/$<CONFIG>"
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/../../paradox-shared/$<CONFIG>")

        target_compile_options(${libname} PRIVATE ${PARADOX_CXX_COMPILE_FLAGS})
        target_compile_definitions(${libname} PRIVATE ${libprefix}_BUILD_DLL)
        target_include_directories(${libname} PUBLIC "${PROJECT_DIR}/api/cpp/${libname}/include/")
    endif()
endfunction()

function(paradox_add_tests libname libprefix linklibs)
    if(${libprefix}_BUILD_TESTS AND PARADOX_LANGUAGE STREQUAL "c")
        get_property(${libprefix}_C_TESTS_EXISTS GLOBAL PROPERTY ${libprefix}_C_TESTS_EXISTS_PROPERTY)
        if(NOT ${libprefix}_C_TESTS_EXISTS)
            set_property(GLOBAL PROPERTY ${libprefix}_C_TESTS_EXISTS_PROPERTY ON)
            paradox_add_unity_testing_lib("v2.5.2")
            file(GLOB_RECURSE ${libprefix}_TESTS_C_SRC "${PROJECT_DIR}/api/c/${libname}/tests/**.c")
            add_executable(${libname}-unit-tests ${${libprefix}_TESTS_C_SRC})
            set_target_properties(${libname}-unit-tests PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/../../${libname}-unit-tests/$<CONFIG>")

            target_include_directories(${libname}-unit-tests PRIVATE "${PROJECT_DIR}/api/c/${libname}/include")
            target_link_libraries(${libname}-unit-tests PRIVATE "${libname}" ${linklibs} unity::framework)
            target_link_directories(${libname}-unit-tests PRIVATE "${CMAKE_BINARY_DIR}/../../paradox-static/$<CONFIG>")

            paradox_add_tests_resources(${libname} "${linklibs}")
        endif()
    endif()

    if(${libprefix}_BUILD_TESTS AND PARADOX_LANGUAGE STREQUAL "cpp")
        get_property(${libprefix}_CXX_TESTS_EXISTS GLOBAL PROPERTY ${libprefix}_CXX_TESTS_EXISTS_PROPERTY)
        if(NOT ${libprefix}_CXX_TESTS_EXISTS)
            set_property(GLOBAL PROPERTY ${libprefix}_CXX_TESTS_EXISTS_PROPERTY ON)
            paradox_add_google_tests_lib("v1.14.0")

            enable_testing()

            file(GLOB_RECURSE ${libprefix}_TESTS_CXX_SRC "${PROJECT_DIR}/api/cpp/${libname}/tests/**.cpp")
            add_executable(${libname}-unit-tests ${${libprefix}_TESTS_CXX_SRC})
            set_target_properties(${libname}-unit-tests PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/../../${libname}-unit-tests/$<CONFIG>")

            target_include_directories(${libname}-unit-tests PRIVATE "${PROJECT_DIR}/api/cpp/${libname}/include")
            target_link_libraries(${libname}-unit-tests PRIVATE "${libname}" ${linklibs} GTest::gtest_main)
            target_link_directories(${libname}-unit-tests PRIVATE "${CMAKE_BINARY_DIR}/../../paradox-static/$<CONFIG>")

            paradox_add_tests_resources(${libname} "${linklibs}")

            include(GoogleTest)
            gtest_discover_tests(${libname}-unit-tests)
        endif()
    endif()
endfunction()

function(paradox_add_tests_resources libname sharedlibs)
    string(REPLACE " " ";" ${libname}_sharedlibs_list ${sharedlibs})
    
    foreach(${libname}_sharedlib ${${libname}_sharedlibs_list})
        paradox_sharedlib_name(${libname}_sharedlib)
        set(${libname}_sharedlib_copy_command
            COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_BINARY_DIR}/../../paradox-shared/$<CONFIG>/${${libname}_sharedlib}" "$<TARGET_FILE_DIR:${libname}-unit-tests>/${${libname}_sharedlib}"
            ${${libname}_sharedlib_copy_command})
    endforeach()

    if(WIN32)
        add_custom_command(TARGET ${libname}-unit-tests POST_BUILD 
            ${${libname}_sharedlib_copy_command}
            COMMENT "Copying shared libraries to ${libname} bin folder")
    endif()
endfunction()

function(paradox_sharedlib_name libname)
    block(SCOPE_FOR VARIABLES)
        if(WIN32)
            if(MSVC)
                set(${libname} ${${libname}}.dll)
            elseif(GCC)
                set(${libname} lib${${libname}}.dll)
            endif()
        elseif(LINUX)
            if(Clang)
                set(${libname} lib${${libname}}.a)
            elseif(GCC)
                set(${libname} lib${${libname}}.a)
            endif()
        elseif(APPLE)
            if(Clang)
                set(${libname} lib${${libname}})
            elseif(GCC)
                set(${libname} lib${${libname}})
            endif()
        endif()
        return(PROPAGATE ${libname})
    endblock()
endfunction()
